# -*- coding: utf-8 -*-
"""IBM_Restuarant Reviews Project

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pJb6zhjCCbGhtgtWoycYQbHtD7X6ajKZ

# **PROJECT DESCRIPTION:**
###step-1: Data import
###step-2: Data preprocessing
###step-3: Vectorization
###step-4: Predictions on reviews

### **STEP-1:DATA IMPORT**

IMPORTING LIBRARIES WHICH ARE NECESSARY
"""

import pandas as pd
import numpy as np
import nltk
from nltk.corpus import stopwords
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier

from google.colab import drive
drive.mount('/content/drive/')
dataset = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/python classes/Restaurant_Reviews.tsv', delimiter = '\t', quoting = 3)

print(dataset.head())

"""###**STEP-2 : DATA PREPROCESSING**"""

import nltk
nltk.download('stopwords')

import re
import nltk
from nltk.corpus import stopwords
from nltk.stem.porter import PorterStemmer
corpus = []
for i in range(0, 1000):
    review = re.sub('[^a-zA-Z]', ' ', dataset['Review'][i])
    review = review.lower()
    review = review.split()
    ps = PorterStemmer()
    review = [ps.stem(word) for word in review if not word in set(stopwords.words('english'))]
    review = ' '.join(review)
    corpus.append(review)

"""PRINTING ALL THE REVIEWS"""

corpus[:1500]

"""### **STEP-3 : VECTORIZATION**"""

from sklearn.feature_extraction.text import CountVectorizer
cv = CountVectorizer(max_features = 1500)
X = cv.fit_transform(corpus).toarray()
y = dataset.iloc[:, 1].values

"""### EXPLANATION OF CLASSIFICATION OF ALGORITHMS
We have three type of algorithms,they are given below:
1. Multinomial Naive Bayes
2. Bernoulli Naive Bayes
3. Logistic Regression
"""

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state = 42)

"""### 1. Multinomial Naive Bayes"""

#1.Multinomial Naive Bayes
from sklearn.naive_bayes import MultinomialNB
classifier = MultinomialNB(alpha=0.1)
classifier.fit(X_train, y_train)
#Test set results
y_pred = classifier.predict(X_test)
#Confusion Matrix
from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y_test, y_pred)
print ("Confusion Matrix of Multinomial Naive Bayes:\n",cm)
#Presenting Accuracy, Precision & Recall
from sklearn.metrics import accuracy_score
from sklearn.metrics import precision_score
from sklearn.metrics import recall_score
score1 = accuracy_score(y_test,y_pred)
score2 = precision_score(y_test,y_pred)
score3= recall_score(y_test,y_pred)
print('\n')
print('The below represents Accuracy, Precision & Recall Multinomial Naive Bayes :')
print("Accuracy = ",round(score1*100,2),"%")
print("Precision = ",round(score2,2))
print("Recall = ",round(score3,2))

"""### 2. Bernoulli Naive Bayes"""

#2.Bernoulli Naive Bayes
from sklearn.naive_bayes import BernoulliNB
classifier = BernoulliNB(alpha=0.8)
classifier.fit(X_train, y_train)
#Test set results
y_pred = classifier.predict(X_test)
# Confusion Matrix
from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y_test, y_pred)
print ("Confusion Matrix of Bernoulli Naive Bayes:\n",cm)
# Presenting Accuracy, Precision and Recall
from sklearn.metrics import accuracy_score
from sklearn.metrics import precision_score
from sklearn.metrics import recall_score
score1 = accuracy_score(y_test,y_pred)
score2 = precision_score(y_test,y_pred)
score3= recall_score(y_test,y_pred)
print("\n")
print('The below represents Accuracy, Precision & Recall of Bernoulli Naive Bayes :')
print("Accuracy = ",round(score1*100,2),"%")
print("Precision = ",round(score2,2))
print("Recall = ",round(score3,2))

"""### 3. Logistic Regression of Naive Bayes"""

# 3.Logistic Regression of Naive Bayes
from sklearn import linear_model
classifier = linear_model.LogisticRegression(C=1.5)
classifier.fit(X_train, y_train)
#Test set results
y_pred = classifier.predict(X_test)
#Confusion Matrix
from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y_test, y_pred)
print ("Confusion Matrix of Logistic Regression of Naive Bayes :\n",cm)
#Presenting Accuracy, Precision and Recall
from sklearn.metrics import accuracy_score
from sklearn.metrics import precision_score
from sklearn.metrics import recall_score
score1 = accuracy_score(y_test,y_pred)
score2 = precision_score(y_test,y_pred)
score3= recall_score(y_test,y_pred)
print("\n")
print('The below represents Accuracy, Precision & Recall of Logistic Regression of Naive Bayes :')
print("Accuracy = ",round(score1*100,2),"%")
print("Precision = ",round(score2,2))
print("Recall = ",round(score3,2))

"""### **STEP-4 : PREDICTIONS ON REVIEWS**"""

def predict_sentiment(sample_review):
  sample_review = re.sub(pattern='[^a-zA-Z]',repl=' ',string = sample_review)
  sample_review = sample_review.lower()
  sample_review_words = sample_review.split()
  sample_review_words = [word for word in sample_review_words if not word in set(stopwords.words('english'))]
  ps = PorterStemmer()
  final_review = [ps.stem(word) for word in sample_review_words]
  final_review = ' '.join(final_review)
  t = cv.transform([final_review]).toarray()
  return classifier.predict(t)

sample_review = 'The food is really bad.'
if predict_sentiment(sample_review):
  print('This is a Positive Review.')
else:
  print('This is a Negative Review')

sample_review = 'Crust is not good. '
if predict_sentiment(sample_review):
  print('This is a Positive Review.')
else:
  print('This is a Negative Review')

sample_review = 'Waitress was a little slow in service.'
if predict_sentiment(sample_review):
  print('This is a Positive Review.')
else:
  print('This is a Negative Review')

sample_review = "That's right....the red velvet cake.....ohhh this stuff is so good."
if predict_sentiment(sample_review):
  print('This is a Positive Review.')
else:
  print('This is a Negative Review')